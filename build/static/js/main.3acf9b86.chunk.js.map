{"version":3,"sources":[" components/Formulario.js"," components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","pet","owner","date","time","symptons","cita","setCita","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3acf9b86.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport uuid from 'uuid/dist/v4';\n\nconst Formulario = ({crearCita}) => {\n\n    //Crear State de Citas\n    const [cita, setCita] = useState({\n        pet: '',\n        owner: '',\n        date: '',\n        time: '',\n        symptons: ''\n    });\n    // state de error\n    const [ error,setError] = useState(false)\n\n    // Función que se ejecuta cada vez que el usuario escribe un input\n    const handleChange = e => {\n        setCita({\n            ...cita,\n            [e.target.name]: e.target.value\n\n        });\n    }\n\n    // Extraer los valores\n    const { pet, owner, date, time, symptons} = cita;\n\n    // Cuando el usario presiona agregar cita\n    const submitCita = e => {\n        e.preventDefault();\n\n        // Validar\n        if(pet.trim() === '' || owner.trim() === '' || date.trim() === '' || time.trim() === '' || symptons.trim() === ''){\n            setError(true);\n            return;\n        }\n        //Eliminar el mensaje previo\n        setError(false);\n\n        //Asignar un ID\n        cita.id = uuid();\n\n        //Crear la cita\n        crearCita(cita);\n\n    \n        //Reiniciar el form\n        setCita({\n        pet: '',\n        owner: '',\n        date: '',\n        time: '',\n        symptons: ''\n\n        })\n    }\n\n    return (\n        <Fragment>\n            <h2>Crear Cita</h2>\n\n            {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null }\n            \n            <form\n                onSubmit={submitCita}\n            >\n                \n                <label>Pet Name</label>\n                <input\n                    type=\"text\"\n                    name=\"pet\"\n                    className=\"u-full-width\"\n                    placeholder=\"Pet Name\" \n                    onChange={handleChange} \n                    value={pet}\n                /> \n            <label>Owner</label>\n                <input\n                    type=\"text\"\n                    name=\"owner\"\n                    className=\"u-full-width\"\n                    placeholder=\"Owner Name\"   \n                    onChange={handleChange} \n                    value={owner}  \n                /> \n                <label>Date</label>\n                <input\n                    type=\"date\"\n                    name=\"date\"\n                    className=\"u-full-width\"  \n                    onChange={handleChange} \n                    value={date}\n                      \n                /> \n               <label>Time</label>\n                <input\n                    type=\"time\"\n                    name=\"time\"\n                    className=\"u-full-width\"\n                    onChange={handleChange} \n                    value={time}\n                    \n                /> \n                <label>Symptons</label>\n                <textarea\n                    name=\"symptons\"\n                    className=\"u-full-width\"\n                    onChange={handleChange} \n                    value={symptons}\n                    ></textarea>\n                    \n                    <button\n                        type=\"submit\"\n                        className=\"u-full-width button-primary\" \n                    >Add Appointment</button>\n                \n            </form>\n\n        </Fragment>\n        \n    );\n}\n\nexport default Formulario;","import React from 'react';\n\nconst Cita= ({cita, eliminarCita}) => (\n    <div className=\"cita\">\n        <p>Pet: <span>{cita.pet}</span></p>\n        <p>Owner: <span>{cita.owner}</span></p>\n        <p>Date: <span>{cita.date}</span></p>\n        <p>Time: <span>{cita.time}</span></p>\n        <p>Symptons: <span>{cita.symptons}</span></p>\n\n        <button\n        className=\"button eliminar u-full-width\"\n        onClick={ () => eliminarCita(cita.id) }\n\n        >Eliminar &times;</button>\n    </div>\n);\n\nexport default Cita;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './ components/Formulario';\nimport Cita from './ components/Cita';\n\nfunction App() {\n\n  //Citas en Local storage lee solo strings\n\n  //Miramos si hay citas grabadas JSON.parse convierte el Array dentro de un string\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  //Array de citas El valor de inicio será lo que está al local Storage\n  const [citas, guardarCitas] = useState(citasIniciales);\n  \n  //Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect( () => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n      if(citasIniciales) {\n        localStorage.setItem('citas', JSON.stringify(citas))\n      } else {\n        localStorage.setItem('citas', JSON.stringify([]));\n      }\n }, [citas]);\n\n  //Función que tome las citas actuales y agregue la nueva\n  const crearCita = cita => {\n    guardarCitas([...citas, cita])\n  }\n\n  //Función que elimina una cita por su id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas);\n    \n  }\n\n  //Mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n           <Formulario \n            crearCita={crearCita}\n           />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n        </div>\n       </div>\n      </div>\n    </Fragment>\n    \n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}